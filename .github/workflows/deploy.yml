name: Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production 
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/future-market-cms-backend:latest

    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/future-market-cms-frontend:latest

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # Update system
          sudo apt-get update
          
          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce
            sudo usermod -aG docker $USER
          fi
          
          # Install Docker Compose if not installed
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Create project directory
          mkdir -p ~/future-market-cms-app
          cd ~/future-market-cms-app
          
          # Create environment file
          cat > .env << EOF
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          EOF
          
          # Create docker-compose.yml
          cat > docker-compose.yml << 'EOF'
          version: '3.8'

          services:
            mongodb:
              image: mongo:6.0
              container_name: future-market-cms-mongo
              restart: unless-stopped
              ports:
                - "27017:27017"
              volumes:
                - mongodb_data:/data/db
              networks:
                - future-market-cms-network

            backend:
              image: ${{ secrets.DOCKER_USERNAME }}/future-market-cms-backend:latest
              container_name: future-market-cms-backend
              restart: unless-stopped
              ports:
                - "3344:3344"
              environment:
                - PORT=3344
                - MONGODB_URI=mongodb://mongodb:27017/future-stores-cms
                - JWT_SECRET=${{ secrets.JWT_SECRET }}
                - JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
                - JWT_EXPIRE=30d
                - NODE_ENV=production
              depends_on:
                - mongodb
              networks:
                - future-market-cms-network

            frontend:
              image: ${{ secrets.DOCKER_USERNAME }}/future-market-cms-frontend:latest
              container_name: future-market-cms-frontend
              restart: unless-stopped
              ports:
                - "80:80"
              environment:
                - VITE_BACKEND_PORT=3344
              depends_on:
                - backend
              networks:
                - future-market-cms-network

          volumes:
            mongodb_data:

          networks:
            future-market-cms-network:
              driver: bridge
          EOF
          
          # Pull latest images and restart services
          docker-compose pull
          docker-compose down
          docker-compose up -d
          
          # Clean up unused images
          docker image prune -f
